name: Packaging

on:
  push:
    tags:
      - "*"

jobs:

  Release:
    name: Release
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v2
      
      - name: Get Version
        id: version
        continue-on-error: true
        run: |
          $Env:version = (git describe --tags)
          $Env:version
          echo "::set-output name=version::$Env:version"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          draft: true
          prerelease: false

  MSVC:
    name: MSVC
    runs-on: windows-latest
    needs: Release
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
    strategy:
      fail-fast: false
      matrix:
        python: [ON, OFF]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.15.2
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Setup NuGet Credentials
        run: |
          & $(vcpkg fetch nuget | select -last 1) sources add `
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
          -storepasswordincleartext `
          -name "GitHub" `
          -username ${{ github.repository_owner }} `
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: vcpkg package restore
        run: |
          vcpkg install zlib gsl muparser opengl gl2ps gtest --triplet x64-windows

      - name: Install Python packages
        if: matrix.python == 'ON'
        run: |
          pip3 install pyqt5 sip pyqt-builder numpy

      - name: Configuring
        run: |
          mkdir build; cd build
          cmake .. `
            -DCMAKE_BUILD_TYPE=Release `
            -DMAKHBER_ORIGIN_IMPORT=ON `
            -DMAKHBER_BUILD_TESTS=ON `
            -DMAKHBER_SCRIPTING_PYTHON=${{ matrix.python }} `
            -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DRUNTIME_DIR="$Env:VCPKG_INSTALLATION_ROOT/installed/x64-windows/bin" `
            -DCPACK_PACKAGE_FILE_NAME=makhber

      - name: Building
        run: |
          cmake --build build --config Release -- -maxCpuCount

      - name: Testing
        run: |
          cd build
          $Env:PYTHONPATH = "$PWD\sip\build\makhber\"
          ctest -C Release --output-on-failure

      - name: Packaging
        continue-on-error: true
        run: |
          cd build
          cpack -G WIX
          cpack -G NSIS

      - name: Upload MSI installer
        if: matrix.python == 'OFF'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: build/makhber.msi
          asset_name: makhber-${{ needs.Release.outputs.version }}-win64.msi
          asset_content_type: application/zip

      - name: Upload NSIS installer
        if: matrix.python == 'OFF'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: build/makhber.exe
          asset_name: makhber-${{ needs.Release.outputs.version }}-win64.exe
          asset_content_type: application/zip

      - name: Upload MSI installer (with Python)
        if: matrix.python == 'ON'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: build/makhber.msi
          asset_name: makhber-${{ needs.Release.outputs.version }}-python-win64.msi
          asset_content_type: application/zip

      - name: Upload NSIS installer (with Python)
        if: matrix.python == 'ON'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: build/makhber.exe
          asset_name: makhber-${{ needs.Release.outputs.version }}-python-win64.exe
          asset_content_type: application/zip

  macos:
    runs-on: macos-latest
    name: macos
    needs: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install prerequisties
        run: |
          brew install qt@5 muparser gsl gl2ps googletest

      - name: Configuring
        run: |
          export PATH=/usr/local/opt/qt@5/bin:$PATH
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DMAKHBER_ORIGIN_IMPORT=ON \
            -DMAKHBER_BUILD_TESTS=ON \
            -DCPACK_PACKAGE_FILE_NAME=makhber

      - name: Building
        run: |
          make -j$(sysctl -n hw.logicalcpu) -C build

      - name: Testing
        run: |
          cd build
          ctest --output-on-failure

      - name: Packaging
        continue-on-error: true
        run: |
          cd build
          cpack -G DragNDrop

      - name: Upload MacOS package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: build/makhber.dmg
          asset_name: makhber-${{ needs.Release.outputs.version }}.dmg
          asset_content_type: application/zip

  Snap:
    runs-on: ubuntu-20.04
    name: Snap
    needs: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: snapcore/action-build@v1
        id: snap_build
        with:
          snapcraft-args: --enable-experimental-extensions

      - name: Upload Snap
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: ${{ steps.snap_build.outputs.snap }}
          asset_name: makhber-${{ needs.Release.outputs.version }}.snap
          asset_content_type: application/zip

      - uses: snapcore/action-publish@v1
        with:
          store_login: ${{ secrets.SNAP_STORE_LOGIN }}
          snap: ${{ steps.snap_build.outputs.snap }}
          release: beta

  Flatpak:
    runs-on: ubuntu-20.04
    name: Flatpak
    needs: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install prerequisties
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            flatpak-builder \
            elfutils
          flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

      - name: Building
        run: |
          mkdir build 
          cd build
          flatpak-builder \
            --repo=repo \
            --install-deps-from=flathub \
            --user \
            --force-clean \
            ./build \
            ../flatpak/com.github.makhber.Makhber.yaml

      - name: Packaging
        run: |
          cd build
          flatpak \
            build-bundle \
            --runtime-repo=https://dl.flathub.org/repo/flathub.flatpakrepo \
            repo \
            makhber.flatpak \
            com.github.makhber.Makhber

      - name: Upload Flatpak
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: build/makhber.flatpak
          asset_name: makhber-${{ needs.Release.outputs.version }}.flatpak
          asset_content_type: application/zip

  AppImage:
    runs-on: ubuntu-18.04
    name: AppImage
    needs: Release
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.15.2
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Install prerequisties
        run: |
          sudo apt install -y --no-install-recommends \
            libglu1-mesa-dev \
            libxcb-util1 \
            libxcb-glx0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-render0 \
            libxcb-shape0 \
            libxcb-shm0 \
            libxcb-sync1 \
            libxcb-xfixes0 \
            libxcb-xinerama0 \
            libxcb-xinput0 \
            libxcb-xkb1 \
            libxcb1 \
            xvfb \
            wget

      - name: Setup NuGet Credentials
        run: |
          mono `vcpkg fetch nuget | tail -n 1` sources add \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -storepasswordincleartext \
            -name "GitHub" \
            -username ${{ github.repository_owner }} \
            -password "${{ secrets.GITHUB_TOKEN }}"

      - name: vcpkg package restore
        run: |
          vcpkg install gsl muparser

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -DMAKHBER_SEARCH_FOR_UPDATES=OFF \
            -DMAKHBER_DOWNLOAD_LINKS=OFF \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_BUILD_TYPE=Release \
            -DOpenGL_GL_PREFERENCE=LEGACY \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake

      - name: Building
        run: |
          xvfb-run make -j$(nproc) -C build

      - name: Packaging
        run: |
          cd build
          make install DESTDIR=AppDir
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy*.AppImage
          export VERSION=${{ needs.Release.outputs.version }}
          ./linuxdeploy-x86_64.AppImage --appdir ./AppDir --plugin qt --output appimage

      - name: Upload AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: build/Makhber-${{ needs.Release.outputs.version }}-x86_64.AppImage
          asset_name: makhber-${{ needs.Release.outputs.version }}.AppImage
          asset_content_type: application/zip
